# Primary class with options.  See documentation at
# http://www.thekelleys.org.uk/dnsmasq/docs/dnsmasq-man.html
class dnsmasq(
  Stdlib::Absolutepath $dnsmasq_logdir,
  Stdlib::Absolutepath $dnsmasq_conf_file,
  Stdlib::Absolutepath $dnsmasq_conf_dir,
  String $package_ensure,
  Boolean $package_manage,
  Variant[String,Array[String]] $package_name,
  Optional[String] $package_provider,
  Boolean $manage_tftp_root,
  Boolean $reload_resolvconf,
  $run_as_user,
  String $service_name,
  Boolean $service_enable,
  Boolean $service_manage,
  Boolean $service_hasstatus,
  Enum['running','stopped'] $service_ensure,
  Hash $firewall_defaults,
  String $firewall_order,
  Boolean $firewall_ipv4_manage,
  Boolean $firewall_ipv6_manage,
  Hash $config_hash,
  # Use defined types to build some lines of dnsmasq.conf...
  Hash $addresses,
  Hash $aliases,
  Hash $cnames,
  Hash $conf_dirs,
  Hash $conf_files,
  Hash $dhcp_boots,
  Hash $dhcp_hosts,
  Hash $dhcp_matches,
  Hash $dhcp_options,
  Hash $dhcp_ranges,
  Hash $dns_rrs,
  Hash $domains,
  Hash $host_records,
  Hash $mx_hosts,
  Hash $ptr_records,
  Hash $servers,
  Hash $srv_hosts,
  Hash $txt_records,
  # ...Otherwise, populate per `dnsmasq --help` on Dnsmasq version 2.76.
  Optional[String] $add_cpe_id,
  Variant[Boolean,Enum['base64','text'],Undef] $add_mac,
  Variant[Stdlib::IP::Address,Array[Stdlib::IP::Address,1,2],Undef] $add_subnet,
  Variant[Stdlib::Absolutepath,Array[Stdlib::Absolutepath],Undef] $addn_hosts,
  Boolean $all_servers,
  $auth_peer,
  $auth_sec_servers,
  $auth_soa,
  $auth_server,
  Optional[Integer] $auth_ttl,
  $auth_zone,
  Boolean $bind_dynamic,
  Boolean $bind_interfaces,
  $bogus_nxdomain,
  Boolean $bogus_priv,
  Variant[String,Array[String],Undef] $bootp_dynamic,
  $bridge_interface,
  Integer $cache_size,
  Boolean $clear_on_reload,
  Variant[Stdlib::Absolutepath,Array[Stdlib::Absolutepath],Undef] $conf_file,
  Boolean $conntrack,
  Optional[Stdlib::Port] $dhcp_alternate_port_server,
  Optional[Stdlib::Port] $dhcp_alternate_port_client,
  Boolean $dhcp_authoritative,
  $dhcp_boot,
  $dhcp_broadcast,
  $dhcp_circuitid,
  Boolean $dhcp_client_update,
  $dhcp_duid,
  Boolean $dhcp_fqdn,
  $dhcp_generate_names,
  $dhcp_hostsdir,
  $dhcp_hostsfile,
  $dhcp_ignore,
  $dhcp_ignore_names,
  Optional[Stdlib::Absolutepath] $dhcp_leasefile,
  $dhcp_lease_max,
  $dhcp_luascript,
  $dhcp_mac,
  $dhcp_match,
  Boolean $dhcp_no_override,
  $dhcp_optsdir,
  $dhcp_optsfile,
  $dhcp_proxy,
  $dhcp_relay,
  $dhcp_remoteid,
  $dhcp_script,
  $dhcp_scriptuser,
  Boolean $dhcp_sequential_ip,
  $dhcp_subscrid,
  Optional[Integer] $dhcp_ttl,
  $dhcp_userclass,
  $dhcp_vendorclass,
  Optional[Integer] $dns_forward_max,
  Boolean $dns_loop_detect,
  Boolean $dnssec,
  Boolean $dnssec_check_unsigned,
  Boolean $dnssec_debug,
  Boolean $dnssec_no_timecheck,
  $dnssec_timestamp,
  Boolean $domain_needed,
  $edns_packet_max,
  Optional[String] $enable_dbus,
  Boolean $enable_ra,
  Boolean $enable_tftp,
  $except_interface,
  Boolean $expand_hosts,
  Boolean $filterwin2k,
  Optional[String] $group,
  Optional[Stdlib::Absolutepath] $hostsdir,
  $interface,
  $interface_name,
  $ipset,
  Boolean $keep_in_foreground,
  Boolean $leasefile_ro,
  Optional[Stdlib::IP::Address] $listen_address,
  Boolean $localise_queries,
  Variant[Stdlib::Fqdn,Array[Stdlib::Fqdn],Undef] $local,
  Boolean $localmx,
  Boolean $local_service,
  Optional[Integer] $local_ttl,
  Variant[Boolean,Integer,Undef] $log_async,
  Boolean $log_dhcp,
  Optional[String] $log_facility,
  Boolean $log_queries,
  Optional[Integer] $max_cache_ttl,
  Optional[Stdlib::Port] $max_port,
  Optional[Integer] $max_ttl,
  Optional[Integer] $min_cache_ttl,
  Optional[Stdlib::Port] $min_port,
  $mx_host,
  Optional[Stdlib::Fqdn] $mx_target,
  $naptr_record,
  Optional[Integer] $neg_ttl,
  Boolean $no_daemon,
  $no_dhcp_interface,
  Boolean $no_hosts,
  Boolean $no_negcache,
  Boolean $no_ping,
  Boolean $no_poll,
  Boolean $no_resolv,
  Optional[Stdlib::Absolutepath] $pid_file,
  Stdlib::Port $port,
  Boolean $proxy_dnssec,
  $pxe_prompt,
  $pxe_service,
  Optional[Stdlib::Port] $query_port,
  Boolean $quiet_dhcp6,
  Boolean $quiet_dhcp,
  Boolean $quiet_ra,
  Boolean $read_ethers,
  $rebind_domain_ok,
  Boolean $rebind_localhost_ok,
  Optional[Stdlib::Absolutepath] $resolv_file,
  $rev_server,
  Boolean $script_arp,
  Boolean $selfmx,
  Variant[Stdlib::Absolutepath,Array[Stdlib::Absolutepath],Undef] $servers_file,
  Boolean $stop_dns_rebind,
  Boolean $strict_order,
  $synth_domain,
  $tag_if,
  Boolean $tftp_lowercase,
  Optional[Integer] $tftp_max,
  Optional[Integer] $tftp_mtu,
  Boolean $tftp_no_blocksize,
  Boolean $tftp_no_fail,
  Optional[Stdlib::Port::Unprivileged] $tftp_port_range_start,
  Optional[Stdlib::Port::Unprivileged] $tftp_port_range_end,
  Stdlib::Absolutepath $tftp_root,
  Boolean $tftp_secure,
  Boolean $tftp_unique_root,
  $trust_anchor,
) {
  Class['dnsmasq::install']
  -> Class['dnsmasq::config']
  ~> Class['dnsmasq::service']

  contain 'dnsmasq::install'
  contain 'dnsmasq::config'
  contain 'dnsmasq::service'
}
